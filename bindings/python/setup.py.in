from setuptools import setup, find_packages
from setuptools.extension import Extension
from setuptools import Distribution

import subprocess

import numpy

project_name = '@PROJECT_NAME@'
project_version = '@PROJECT_VERSION@'

try:
  from local_config import local_libdirs, local_include_dirs
except ImportError:
  local_libdirs = []
  local_include_dirs = []


def pkgconfig(name):

    def pkgconfig_get(flags):
        res = subprocess.run(['pkg-config', flags, name], capture_output=True)

        return res.stdout.decode().strip().split()

    cflags = pkgconfig_get('--cflags-only-other')

    includes = pkgconfig_get('--cflags-only-I')

    libs = pkgconfig_get('--libs-only-l')

    libdirs = pkgconfig_get('--libs-only-L')

    return {'cflags': cflags,
            'includes': includes,
            'libs': libs,
            'libdirs': libdirs}


pkgconfig_args = pkgconfig(project_name)

def cythonize(*args, **kwargs):
    from Cython.Build import cythonize
    return cythonize(*args, **kwargs)

extensions = [
    Extension("sleqp.sleqp",
              ['src/sleqp.pyx'],
              include_dirs=[numpy.get_include()] + local_include_dirs + pkgconfig_args['includes'],
              libraries=[project_name],
              extra_link_args=pkgconfig_args['libs'],
              library_dirs=local_libdirs + pkgconfig_args['libdirs'],
              extra_compile_args=pkgconfig_args['cflags']
    )]

requirements = []

Distribution().fetch_build_eggs(['Cython'])

with open('requirements.txt') as f:
    requirements = f.read().splitlines()

setup(name=project_name,
      version=project_version,
      ext_modules=cythonize(extensions),
      packages=find_packages(exclude=["tests"]),
      install_requires=requirements,
      setup_requires=['wheel'],
      classifiers=[
        'Programming Language :: Cython',
        'Intended Audience :: Science/Research',
        'Topic :: Scientific/Engineering :: Mathematics'
      ],
      test_suite='tests')
