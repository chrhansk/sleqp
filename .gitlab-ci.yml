image: "moto.math.nat.tu-bs.de:5050/code/images/sleqp_builddeps:latest"

stages:
  - test
  - build
  - package
  - test_install
  - downstream

variables:
  CTEST_OUTPUT_ON_FAILURE: '1'
  DEFAULT_LPS: 'SoPlex'
  DEFAULT_FACT: 'Umfpack'

# run tests
.test_job_template: &test_job_template
  stage: test
  before_script:
    - mkdir -p build
  dependencies: []

.test_report_template: &test_report_template
  variables:
    TEST_EXPORT_XML: 1
  artifacts:
    when: always
    reports:
      junit: ./build/*.xml

# TODO: Run tests as soon as we can get a MUMPS version without OpenMP
test_fact_build_MUMPS:
  <<: *test_job_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=MUMPS -DSLEQP_LPS=$DEFAULT_LPS
    - make

test_fact_Umfpack:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=Umfpack -DSLEQP_LPS=$DEFAULT_LPS
    - make all build_tests test

test_fact_MA27:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=MA27 -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests test

test_fact_MA57:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=MA57 -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests test

test_fact_MA86:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=MA86 -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests test

test_fact_MA97:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=MA97 -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests test

test_lps_HiGHS:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=$DEFAULT_FACT -DSLEQP_LPS=HiGHS
    - make build_tests test

test_coverage:
  <<: *test_job_template
  <<: *test_report_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_GENERATE_COVERAGE=On -DSLEQP_FACT=$DEFAULT_FACT -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests test_coverage

# Excluding python tests since they are built by tox
# Excluding problem scaling tests since valgrind messes with floating point exceptions
test_memcheck:
  <<: *test_job_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=Off -DSLEQP_FACT=$DEFAULT_FACT -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests
    - ctest -T memcheck -E "python_sleqp_tests|problem_scaling_test"

test_python:
  <<: *test_job_template
  script:
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE="Debug" -DSLEQP_ENABLE_UNIT_TESTS=On -DSLEQP_ENABLE_PYTHON=On -DSLEQP_FACT=$DEFAULT_FACT -DSLEQP_LPS=$DEFAULT_LPS
    - make build_tests test
  artifacts:
    when: always
    reports:
      junit: ./bindings/python/python_test_output.xml


# TODO: As soon as we get capable compilers, add misc. sanitizers to tests

build:
  stage: build
  only:
    - master
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX="/usr" -DCMAKE_BUILD_TYPE="Release" -DSLEQP_ENABLE_UNIT_TESTS=Off -DSLEQP_ENABLE_PYTHON=On -DSLEQP_FACT=$DEFAULT_FACT -DSLEQP_LPS=$DEFAULT_LPS
    - make -j$(nproc)
  artifacts:
    paths:
      - build
      - bindings/python

package:
  stage: package
  only:
    - master
  dependencies:
    - build
  script:
    - cd build
    - make package
  dependencies:
    - build
  artifacts:
    paths:
      - build/*.deb
      - build/*.bz2

package_wheel:
  stage: package
  only:
    - master
  dependencies:
    - build
  script:
    - cd build
    - make python_sleqp_bdist_wheel
  dependencies:
    - build
  artifacts:
    paths:
      - bindings/python/dist/*.whl

package_sdist:
  stage: package
  only:
    - master
  dependencies:
    - build
  script:
    - cd build
    - make python_sleqp_sdist
  dependencies:
    - build
  artifacts:
    paths:
      - bindings/python/dist/*.tar.gz

test_install_package:
  stage: test_install
  only:
    - master
  script:
    - cd build
    - apt -y install ./*.deb

.test_install_template: &test_install_template
  stage: test_install
  only:
    - master
  before_script:
    - cd build
    - apt -y install ./*.deb

test_install_make:
  <<: *test_install_template
  script:
    - cd $CI_PROJECT_DIR/src/test/install
    - ./test_make.sh

test_install_cmake:
  <<: *test_install_template
  script:
    - cd $CI_PROJECT_DIR/src/test/install
    - ./test_cmake.sh

test_install_python_sdist:
  <<: *test_install_template
  script:
    - cd $CI_PROJECT_DIR
    - ./src/test/install/test_python_sdist.sh

trigger_downstream:
  stage: downstream
  only:
    - master
  trigger:
    project: code/INDo
